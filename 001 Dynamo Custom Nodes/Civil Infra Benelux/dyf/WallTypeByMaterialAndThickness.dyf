<Workspace Version="1.3.3.4651" X="-167.251324940653" Y="-22.9811744510386" zoom="0.70823125" ScaleFactor="1" Name="WallTypeByMaterialAndThickness" Description="Creates a Wall Type by Material and Thickness" ID="05ad76d3-2d5a-425f-8677-332ea543c9fe" Category="CIB.Revit.Elements.WallType.Create">
  <NamespaceResolutionMap>
    <ClassMap partialName="Revit.Material" resolvedName="Revit.Elements.Material" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="42a2d40e-2ffb-4403-9e03-c0545406720c" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="283.2" y="344.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="thickness : double" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="e2b6a3cb-aec6-4bb6-bc6f-897fb07205cb" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="252" y="439.2" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="material : Revit.Material" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <PythonNodeModels.PythonNode guid="1cd486d9-6c3b-4c83-9405-24853bc55cc4" type="PythonNodeModels.PythonNode" nickname="Python Script | WallTypeByMaterialAndThickness" x="542.4" y="372" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

#Import the Revit Services
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

#Import the Revit Nodes
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

#Import the Revit API
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

#Import system
from System import *
from System.Collections.Generic import *

#Define tolist function
def tolist(obj1):
	if hasattr(obj1,"__iter__"):
		return obj1
	else:
		return [obj1]
		
def fromlist(obj1):
	if len(obj1) == 1:
		return obj1[0];
	else:
		return obj1;

def FeetToMm(d):
	return float(d) * 304.8
	
def MmToFeet(d):
	return float(d) / 304.8

def WallTypeByWidthAndMaterial(doc, width, material):
	widths = tolist(width)
	materials = tolist(UnwrapElement(material))
	output = []
	for width, material in zip(widths, materials):
	
		#Get all Wall types in the Current Document
		wall_types = [w for w in FilteredElementCollector(doc).OfClass(WallType) if w.Kind == WallKind.Basic]
		
		#Is the Width larger then 0
		if width &gt; 0:
		
			#Try to find a matching Wall type
			current_walls = []
			for wall_type in wall_types:
				wall_width = FeetToMm(wall_type.Width)
				cs = wall_type.GetCompoundStructure();
				matId = cs.GetMaterialId(0);
				if width == wall_width and material.Id == matId:
					current_walls.append(wall_type);
					break
					
			#Determine If Wall type is Found
			if len(current_walls) &gt; 0:
				output.append(current_walls[0]);
				
			#Create a New WallType
			else:
				name = material.Name + "_" + str(int(width));
				#Try to create a type
				try:
					type = wall_types[0].Duplicate(name)
					csl = CompoundStructureLayer()
					csl.Width = MmToFeet(width)
					csl.Function = MaterialFunctionAssignment.Structure
					csl.MaterialId = material.Id
					cs = CompoundStructure.CreateSimpleCompoundStructure(List[CompoundStructureLayer]([csl]))
					cs.EndCap = EndCapCondition.NoEndCap
					cs.StructuralMaterialIndex = cs.GetFirstCoreLayerIndex()
					type.SetCompoundStructure(cs)
					type.Function = WallFunction.Foundation
					output.append(type);
				#Return an existing type
				except:
					output.append(Revit.Elements.WallType.ByName(name))
				
		#Return Error
		else:
			output.append("Thickness has to be greater than zero!");
			
	return fromlist(output);


width = IN[0];
material = IN[1];

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application
uidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument


# Start Transaction
TransactionManager.Instance.EnsureInTransaction(doc)

wall_types = WallTypeByWidthAndMaterial(doc, width, material)

#End Transaction
TransactionManager.Instance.TransactionTaskDone()


OUT = wall_types</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="2de54213-d6aa-4694-bde1-bee982b19ae0" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="940.76688660568" y="373.721408725254" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="wallType : WallType" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="42a2d40e-2ffb-4403-9e03-c0545406720c" start_index="0" end="1cd486d9-6c3b-4c83-9405-24853bc55cc4" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e2b6a3cb-aec6-4bb6-bc6f-897fb07205cb" start_index="0" end="1cd486d9-6c3b-4c83-9405-24853bc55cc4" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="1cd486d9-6c3b-4c83-9405-24853bc55cc4" start_index="0" end="2de54213-d6aa-4694-bde1-bee982b19ae0" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="2889326f-4651-4a98-a571-ddd8339c9bd9" annotationText="Input" left="242" top="298.8" width="256.8" height="208.2" fontSize="30" InitialTop="344.8" InitialHeight="192.2" TextblockHeight="36" backgrouund="#FFFF7BAC">
      <Models ModelGuid="42a2d40e-2ffb-4403-9e03-c0545406720c" />
      <Models ModelGuid="e2b6a3cb-aec6-4bb6-bc6f-897fb07205cb" />
    </Dynamo.Graph.Annotations.AnnotationModel>
    <Dynamo.Graph.Annotations.AnnotationModel guid="edefdd47-4106-4aa3-b102-7974c291904d" annotationText="Core Function" left="532.4" top="326" width="339.2" height="139.4" fontSize="30" InitialTop="372" InitialHeight="123.4" TextblockHeight="36" backgrouund="#FFFFAA45">
      <Models ModelGuid="1cd486d9-6c3b-4c83-9405-24853bc55cc4" />
    </Dynamo.Graph.Annotations.AnnotationModel>
    <Dynamo.Graph.Annotations.AnnotationModel guid="ac12075f-2fc6-4ef1-9592-b91d5e576935" annotationText="Output" left="930.76688660568" top="327.721408725254" width="207.2" height="113.8" fontSize="30" InitialTop="373.721408725254" InitialHeight="97.8" TextblockHeight="36" backgrouund="#FF71C6A8">
      <Models ModelGuid="2de54213-d6aa-4694-bde1-bee982b19ae0" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>